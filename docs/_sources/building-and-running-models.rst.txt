Building and running models
===========================

The repository provides a variety of Python tools to build, test and run
models end-to-end, including performing individual steps in this
process. These tools include:

-  a Python class framework for working with Oasis models and model
   resources as Python objects (the ``models`` subpackage)
-  a Python class framework for managing model exposures and resources,
   and also for generating Oasis files from these (the ``exposures``
   subpackage)
-  a Python factory class for instantiating keys lookup services for
   models, and generating and saving keys outputs from these lookup
   services
-  executable scripts, based on these class frameworks, for writing keys
   outputs from model lookup services (``run_keys_lookup.py``),
   generating Oasis files from model source exposures and other
   resources (``generate_oasis_files.py``), and generating loss outputs
   for models (``generate_loss_outputs.py``). This includes a "master"
   script that can perform all these steps to run the model end-to-end
   (``run_model.py``).

Generating keys outputs
-----------------------

``run_keys_lookup.py`` is an executable script that can generate keys
records and Oasis files keys for a model, given the following arguments
(in no particular order)::

::

    ./run_keys_lookup.py -k /path/to/keys/data
                         -v /path/to/model/version/csv/file
                         -l /path/to/lookup/service/package
                         -e /path/to/model/exposures/csv/file
                         -o /path/to/output/file
                         -f <output format - `oasis_keys` or `list_keys`>

When calling the script this way paths can be given relative to the
script, in particular, file paths should include the filename and
extension. The paths to the keys data, lookup service package, and model
version file will usually be located in the model keys server (Git)
repository, which would also contain the lookup service source code for
the model (lookup service package. The lookup service package is usually
located in the ``src/keys_server`` Python subpackage in the model keys
serer repository (if it is managed by Oasis LMF).

It is also possible to run the script by defining these arguments in a
JSON configuration file and calling the script using the path to this
file using the option ``-f``. In this case the paths should be given
relative to the parent folder in which the model keys server repository
is located.::

::

    ./run_keys_lookup.py -f /path/to/keys/script/config/file

The JSON file should contain the following keys (in no particular
order)::

::

    "keys_data_path"
    "model_version_file_path"
    "lookup_package_path"
    "model_exposures_file_path"
    "output_file_path"
    "output_format"

and the values of these keys should be string paths, given relative to
the parent folder in which the model keys server repository is located.
The JSON file is usually placed in the model keys server repository.

Generating Oasis Files
----------------------

``generate_oasis_files.py`` is an executable script that can generate
Oasis files for a model, given the following arguments (in no particular
order)::

::

    ./generate_oasis_files.py -k /path/to/keys/data
                              -v /path/to/model/version/csv/file
                              -l /path/to/lookup/service/package
                              -p /path/to/canonical/exposures/profile/JSON/file
                              -e /path/to/source/exposures/file
                              -a /path/to/source/exposures/validation/file
                              -b /path/to/source/to/canonical/exposures/transformation/file
                              -c /path/to/canonical/exposures/validation/file
                              -d /path/to/canonical/to/model/exposures/transformation/file
                              -x /path/to/xtrans/executable
                              -o /path/to/oasis/files/directory

When calling the script this way paths can be given relative to the
script, in particular, file paths should include the filename and
extension. The paths to the keys data, lookup service package, model
version file, canonical exposures profile JSON, source exposures file,
transformation and validation files, will usually be located in the
model keys server repository.

It is also possible to run the script by defining these arguments in a
JSON configuration file and calling the script using the path to this
file using the option ``-f``. In this case the paths should be given
relative to the parent folder in which the model keys server repository
is located.::

::

    ./generate_oasis_files.py -f /path/to/model/resources/JSON/config/file

The JSON file contain the following keys (in no particular order)::

::

    "keys_data_path"
    "model_version_file_path"
    "lookup_package_path"
    "canonical_exposures_profile_json_path"
    "source_exposures_file_path"
    "source_exposures_validation_file_path"
    "source_to_canonical_exposures_transformation_file_path"
    "canonical_exposures_validation_file_path"
    "canonical_to_model_exposures_transformation_file_path"
    "xtrans_path"
    "oasis_files_path"

and the values of these keys should be string paths, given relative to
the parent folder in which the model keys server repository is located.
The JSON file is usually placed in the model keys server repository.

Generating loss outputs
-----------------------

``generate_loss_outputs.py`` is an executable script that, given a model
analysis settings JSON file, model data and some other parameters, can
generate a (Bash) shell script which can be used to generate loss
outputs for the model using the installed ktools framework, given the
following arguments (in no particular order)::

::

    ./generate_loss_outputs.py -j /path/to/analysis/settings/json/file
                               -s <ktools script name (without file extension)>
                               -m /path/to/model/data
                               -r /path/to/model/run/directory
                               -n <number of ktools calculation processes to use>

When calling the script this way paths can be given relative to the
script, in particular, file paths should include the filename and
extension. The ktools script name should not contain any filename
extension, and the model run directory can be placed anywhere in the
parent folder common to ``omdk`` and the model keys server repository.

It is also possible to run the script by defining these arguments in a
JSON configuration file and calling the script using the path to this
file using the option ``-f``. In this case the paths should be given
relative to the parent folder in which the model keys server repository
is located.::

::

    ./generate_loss_outputs.py -f /path/to/model/resources/JSON/config/file'

The JSON file should contain the following keys (in no particular
order)::

::

    "analysis_settings_json_file_path"
    "ktools_script_name"
    "model_data_path"
    "model_run_dir_path"
    "ktools_num_processes"

and the values of the path-related keys should be string paths, given
relative to the parent folder in which the model keys server repository
is located. The JSON file is usually placed in the model keys server
repository.

**Note**: The output of ``generate_loss_outputs.py`` is an executable
Bash shell script, containing ktools commands for generating loss
outputs for the givem model and placed in the model run directory. You
will have to execute the shell script in the model run directory in
order to see the outputs. The model run directory must contain the
analysis settings JSON file and either the actual model data or at least
symlinked model data files (in the ``static`` subfolder). It must have
the following structure::

::

    ├── analysis_settings.json
    ├── fifo/
    ├── input/
    ├── output/
    ├── static/
    └── work/

The outputs are written in the ``output`` subfolder, and the model data
should either be placed directly in the ``static`` subfolder or the
actual folder should be symlinked to the ``static`` subfolder.

Running a model end-to-end
--------------------------

``run_model.py`` is an executable script that can run models end-to-end,
i.e. generate ktools outputs from model resources, including keys data,
model data, analysis settings etc., given the following arguments (in no
particular order)::

::

    ./run_model.py -k /path/to/keys/data/folder
                   -v /path/to/model/version/file
                   -l /path/to/model/keys/lookup/service/package
                   -p /path/to/canonical/exposures/profile/JSON/file
                   -e /path/to/source/exposures/file
                   -a /path/to/source/exposures/validation/file
                   -b /path/to/source/to/canonical/exposures/transformation/file
                   -c /path/to/canonical/exposures/validation/file
                   -d /path/to/canonical/to/model/exposures/transformation/file
                   -x /path/to/xtrans/executable
                   -j /path/to/analysis/settings/json/file
                   -s <ktools script name (without file extension)>
                   -m /path/to/model/data
                   -r /path/to/model/run/directory
                   -n <number of ktools calculation processes to use>

When calling the script this way paths can be given relative to the
script, in particular, file paths should include the filename and
extension. The paths to the keys data, lookup service package, model
version file, canonical exposures profile JSON, source exposures file,
transformation and validation files, and analysis settings JSON file,
will usually be located in the model keys server repository. The ktools
script name should not contain any filename extension, and the model run
directory can be placed anywhere in the parent folder common to ``omdk``
and the model keys server repository.

It is also possible to run the script by defining these arguments in a
JSON configuration file and calling the script using the path to this
file using the option ``-f``. In this case the paths should be given
relative to the parent folder in which the model keys server repository
is located.::

::

    ./run_model.py -f /path/to/model/resources/JSON/config/file'

The JSON file should contain the following keys (in no particular
order)::

::

    "keys_data_path"
    "model_version_file_path"
    "lookup_package_path"
    "canonical_exposures_profile_json_path"
    "source_exposures_file_path"
    "source_exposures_validation_file_path"
    "source_to_canonical_exposures_transformation_file_path"
    "canonical_exposures_validation_file_path"
    "canonical_to_model_exposures_transformation_file_path"
    "xtrans_path"
    "analysis_settings_json_file_path"
    "ktools_script_name"
    "model_data_path"
    "model_run_dir_path"
    "ktools_num_processes"

and the values of the path-related keys should be string paths, given
relative to the parent folder in which the model keys server repository
is located. The JSON file is usually placed in the model keys server
repository.

**NOTE**: As the JSON configuration files for
``generate_oasis_files.py`` and ``generate_loss_outputs.py`` defines a
subset of the resources required for ``run_model.py`` you can use the
``run_model.py`` configuration file to also run
``generate_oasis_files.py``.