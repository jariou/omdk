# -*- coding: utf-8 -*-

__all__ = ['VulnerabilityLookup']

# (c) 2013-2016 Oasis LMF Ltd.  Software provided for early adopter evaluation only.
import csv
import logging

import oasis_utils


class VulnerabilityLookup(object):
    '''
    Functionality to perform a vulnerability lookup.
    '''

    _lookup_data = dict()

    def __init__(self, vulnerabilities_file=None):

        if vulnerabilities_file:
            with open(vulnerabilities_file, 'r') as f:
                dr = csv.DictReader(f)
                self.load_lookup_data(dr)


    def load_lookup_data(self, data):
        '''
        Set the lookup data.
        Args:
            data: the lookup data.
        '''
        self._lookup_data = dict(
            (self.get_key(r['COVERAGE'], r['CLASS_1']), int(r['VULNERABILITY_ID']))
            for r in data
        )


    def get_key(self, coverage, class_1):
        '''
        Create the lookup key.
        Args:
        coverage: the coverage
        class_1: the class 1 value
        '''
        #        return '{}-{}'.format(coverage, class_1)
        return '{}-{}'.format(coverage, class_1)


    def do_lookup_location(self, location):
        '''
        Perform a lookup on a specified location.
        Args:
            location: the location to lookup.
        Return:
            Lookup result
        '''
        logging.debug("Looking up location.", )

        coverage = location['coverage']
        class_1 = location['class_1']
        key = self.get_key(coverage, class_1)

        status = oasis_utils.KEYS_STATUS_NOMATCH
        vulnerability_id = None
        message = ''

        try:
            vulnerability_id = self._lookup_data[key]
        except KeyError:
            pass
        else:
            status = oasis_utils.KEYS_STATUS_SUCCESS

        return {
            'status': status,
            'vulnerability_id': vulnerability_id,
            'message': None
        }
